name: build, deploy mvc in master server
on: 
  push: 
    branches:
      - master
jobs:
  run_test:
    name: run unit test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.21

    - name: Run Coverage Test
      run: |
        echo "=================================================================================="
        echo "Coverage Test"
        echo "=================================================================================="
        go test -v -coverprofile coverage.cov ./...
        echo "\n"
        echo "=================================================================================="
        echo "All Package Coverage"
        echo "=================================================================================="
        go tool cover -func coverage.cov

    - name: Upload coverage report
      if: ${{ success() }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.cov

  build_docker:
    name: build and push to docker hub
    runs-on: ubuntu-latest
    needs: run_test
    steps:
      - uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_DEBUG=${{ secrets.DB_DEBUG }}" >> .env
          echo "DB_MIGRATION=${{ secrets.DB_MIGRATION }}" >> .env
          echo "RAJA_ONGKIR_HOST=${{ secrets.RAJA_ONGKIR_HOST }}" >> .env
          echo "RAJA_ONGKIR_TOKEN=${{ secrets.RAJA_ONGKIR_TOKEN }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> .env
          echo "MAILJET_PUBLIC_KEY=${{ secrets.MAILJET_PUBLIC_KEY }}" >> .env
          echo "MAILJET_PRIVATE_KEY=${{ secrets.MAILJET_PRIVATE_KEY }}" >> .env
          echo "MAILJET_FROM_EMAIL=${{ secrets.MAILJET_FROM_EMAIL }}" >> .env
          echo "MAILJET_FROM_NAME=${{ secrets.MAILJET_FROM_NAME }}" >> .env
          echo "VERIFICATION_EMAIL_HOST=${{ secrets.VERIFICATION_EMAIL_HOST }}" >> .env
          echo "XENDIT_HOST=${{ secrets.XENDIT_HOST }}" >> .env
          echo "XENDIT_TOKEN=${{ secrets.XENDIT_TOKEN }}" >> .env
          echo "XENDIT_WEBHOOK_TOKEN=${{ secrets.XENDIT_WEBHOOK_TOKEN  }}" >> .env
          echo "DROPBOX_ACCESS_TOKEN=${{ secrets.DROPBOX_ACCESS_TOKEN }}" >> .env

      - name: docker build
        run: docker build -t fadilahonespot/cakrawala:1.0.0 . 

      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: push to docker hub
        run: docker push fadilahonespot/cakrawala:1.0.0

  deploy:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # pull the docker image from the registry
            docker pull fadilahonespot/cakrawala:1.0.0
            
            # stop and remove any existing container
            docker stop cakrawala-store || true
            docker rm cakrawala-store || true

            # run the Docker container 
            docker run -d -p 8124:8124 --name cakrawala-store fadilahonespot/cakrawala:1.0.0