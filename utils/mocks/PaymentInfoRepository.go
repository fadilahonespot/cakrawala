// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadilahonespot/cakrawala/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// PaymentInfoRepository is an autogenerated mock type for the PaymentInfoRepository type
type PaymentInfoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *PaymentInfoRepository) Create(ctx context.Context, req *entity.PaymentInfo) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.PaymentInfo) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByXpayment provides a mock function with given fields: ctx, externalId
func (_m *PaymentInfoRepository) FindByXpayment(ctx context.Context, externalId string) (*entity.PaymentInfo, error) {
	ret := _m.Called(ctx, externalId)

	if len(ret) == 0 {
		panic("no return value specified for FindByXpayment")
	}

	var r0 *entity.PaymentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.PaymentInfo, error)); ok {
		return rf(ctx, externalId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.PaymentInfo); ok {
		r0 = rf(ctx, externalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PaymentInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, externalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *PaymentInfoRepository) Update(ctx context.Context, req *entity.PaymentInfo) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.PaymentInfo) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentInfoRepository creates a new instance of PaymentInfoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentInfoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentInfoRepository {
	mock := &PaymentInfoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
