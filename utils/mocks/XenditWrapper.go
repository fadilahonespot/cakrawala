// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	xendit "github.com/fadilahonespot/cakrawala/infrastructure/http/xendit"
	mock "github.com/stretchr/testify/mock"
)

// XenditWrapper is an autogenerated mock type for the XenditWrapper type
type XenditWrapper struct {
	mock.Mock
}

// CheckPayment provides a mock function with given fields: ctx, paymentId
func (_m *XenditWrapper) CheckPayment(ctx context.Context, paymentId string) (xendit.CheckPaymentResponse, error) {
	ret := _m.Called(ctx, paymentId)

	if len(ret) == 0 {
		panic("no return value specified for CheckPayment")
	}

	var r0 xendit.CheckPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (xendit.CheckPaymentResponse, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) xendit.CheckPaymentResponse); ok {
		r0 = rf(ctx, paymentId)
	} else {
		r0 = ret.Get(0).(xendit.CheckPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckVirtualAccount provides a mock function with given fields: ctx, id
func (_m *XenditWrapper) CheckVirtualAccount(ctx context.Context, id string) (xendit.CreateViartualAccountResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckVirtualAccount")
	}

	var r0 xendit.CreateViartualAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (xendit.CreateViartualAccountResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) xendit.CreateViartualAccountResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(xendit.CreateViartualAccountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualAccount provides a mock function with given fields: ctx, req
func (_m *XenditWrapper) CreateVirtualAccount(ctx context.Context, req xendit.CreateVirtualAccountRequest) (xendit.CreateViartualAccountResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualAccount")
	}

	var r0 xendit.CreateViartualAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, xendit.CreateVirtualAccountRequest) (xendit.CreateViartualAccountResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, xendit.CreateVirtualAccountRequest) xendit.CreateViartualAccountResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(xendit.CreateViartualAccountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, xendit.CreateVirtualAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBank provides a mock function with given fields: ctx
func (_m *XenditWrapper) GetBank(ctx context.Context) ([]xendit.GetBankResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBank")
	}

	var r0 []xendit.GetBankResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xendit.GetBankResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xendit.GetBankResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xendit.GetBankResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewXenditWrapper creates a new instance of XenditWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXenditWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *XenditWrapper {
	mock := &XenditWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
