// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadilahonespot/cakrawala/domain/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	paginate "github.com/fadilahonespot/cakrawala/utils/paginate"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// BeginTrans provides a mock function with given fields: ctx
func (_m *TransactionRepository) BeginTrans(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTrans")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, tx, req
func (_m *TransactionRepository) CreateTransaction(ctx context.Context, tx *gorm.DB, req *entity.Transaction) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Transaction) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransactionBasket provides a mock function with given fields: ctx, req
func (_m *TransactionRepository) CreateTransactionBasket(ctx context.Context, req *entity.TransactionBasket) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactionBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TransactionBasket) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransactionDetail provides a mock function with given fields: ctx, tx, req
func (_m *TransactionRepository) CreateTransactionDetail(ctx context.Context, tx *gorm.DB, req *entity.TransactionDetail) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactionDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.TransactionDetail) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransactionDetail provides a mock function with given fields: ctx, tx, id
func (_m *TransactionRepository) DeleteTransactionDetail(ctx context.Context, tx *gorm.DB, id int) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransactionDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllTransactionBasketByUserId provides a mock function with given fields: ctx, userId, params
func (_m *TransactionRepository) FindAllTransactionBasketByUserId(ctx context.Context, userId string, params paginate.Pagination) ([]entity.TransactionBasket, int64, error) {
	ret := _m.Called(ctx, userId, params)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTransactionBasketByUserId")
	}

	var r0 []entity.TransactionBasket
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) ([]entity.TransactionBasket, int64, error)); ok {
		return rf(ctx, userId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) []entity.TransactionBasket); ok {
		r0 = rf(ctx, userId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TransactionBasket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, params)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindTransactionBasketByUserIdStatusPending provides a mock function with given fields: ctx, userId
func (_m *TransactionRepository) FindTransactionBasketByUserIdStatusPending(ctx context.Context, userId string) (*entity.TransactionBasket, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionBasketByUserIdStatusPending")
	}

	var r0 *entity.TransactionBasket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.TransactionBasket, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.TransactionBasket); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionBasket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionById provides a mock function with given fields: ctx, id
func (_m *TransactionRepository) FindTransactionById(ctx context.Context, id string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionById")
	}

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionDetailByBasketId provides a mock function with given fields: ctx, basketId
func (_m *TransactionRepository) FindTransactionDetailByBasketId(ctx context.Context, basketId string) ([]entity.TransactionDetail, error) {
	ret := _m.Called(ctx, basketId)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionDetailByBasketId")
	}

	var r0 []entity.TransactionDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.TransactionDetail, error)); ok {
		return rf(ctx, basketId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.TransactionDetail); ok {
		r0 = rf(ctx, basketId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TransactionDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, basketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionDetailByProductId provides a mock function with given fields: ctx, productId
func (_m *TransactionRepository) FindTransactionDetailByProductId(ctx context.Context, productId string) (entity.TransactionDetail, error) {
	ret := _m.Called(ctx, productId)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionDetailByProductId")
	}

	var r0 entity.TransactionDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.TransactionDetail, error)); ok {
		return rf(ctx, productId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.TransactionDetail); ok {
		r0 = rf(ctx, productId)
	} else {
		r0 = ret.Get(0).(entity.TransactionDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionDetailByProductIdAndBasketId provides a mock function with given fields: ctx, productId, basketId
func (_m *TransactionRepository) FindTransactionDetailByProductIdAndBasketId(ctx context.Context, productId string, basketId string) (entity.TransactionDetail, error) {
	ret := _m.Called(ctx, productId, basketId)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionDetailByProductIdAndBasketId")
	}

	var r0 entity.TransactionDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.TransactionDetail, error)); ok {
		return rf(ctx, productId, basketId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.TransactionDetail); ok {
		r0 = rf(ctx, productId, basketId)
	} else {
		r0 = ret.Get(0).(entity.TransactionDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, productId, basketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionBasket provides a mock function with given fields: ctx, tx, req
func (_m *TransactionRepository) UpdateTransactionBasket(ctx context.Context, tx *gorm.DB, req *entity.TransactionBasket) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.TransactionBasket) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransactionDetail provides a mock function with given fields: ctx, tx, req
func (_m *TransactionRepository) UpdateTransactionDetail(ctx context.Context, tx *gorm.DB, req *entity.TransactionDetail) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.TransactionDetail) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
