// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/fadilahonespot/cakrawala/usecase/transaction/model"
	mock "github.com/stretchr/testify/mock"

	paginate "github.com/fadilahonespot/cakrawala/utils/paginate"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// AddProductBasket provides a mock function with given fields: ctx, userId, req
func (_m *TransactionService) AddProductBasket(ctx context.Context, userId string, req model.AddBasketRequest) error {
	ret := _m.Called(ctx, userId, req)

	if len(ret) == 0 {
		panic("no return value specified for AddProductBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.AddBasketRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallbackTransaction provides a mock function with given fields: ctx, webhookId, req
func (_m *TransactionService) CallbackTransaction(ctx context.Context, webhookId string, req model.CallbackRequest) error {
	ret := _m.Called(ctx, webhookId, req)

	if len(ret) == 0 {
		panic("no return value specified for CallbackTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CallbackRequest) error); ok {
		r0 = rf(ctx, webhookId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckAvailableBank provides a mock function with given fields: ctx
func (_m *TransactionService) CheckAvailableBank(ctx context.Context) ([]model.CheckBankResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAvailableBank")
	}

	var r0 []model.CheckBankResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.CheckBankResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.CheckBankResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CheckBankResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckShipping provides a mock function with given fields: ctx, userId, req
func (_m *TransactionService) CheckShipping(ctx context.Context, userId string, req model.CheckShippingRequest) (model.CheckShippingResponse, error) {
	ret := _m.Called(ctx, userId, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckShipping")
	}

	var r0 model.CheckShippingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CheckShippingRequest) (model.CheckShippingResponse, error)); ok {
		return rf(ctx, userId, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CheckShippingRequest) model.CheckShippingResponse); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Get(0).(model.CheckShippingResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.CheckShippingRequest) error); ok {
		r1 = rf(ctx, userId, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Checkout provides a mock function with given fields: ctx, userId, req
func (_m *TransactionService) Checkout(ctx context.Context, userId string, req model.CheckoutRequest) (model.CheckoutResponse, error) {
	ret := _m.Called(ctx, userId, req)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 model.CheckoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CheckoutRequest) (model.CheckoutResponse, error)); ok {
		return rf(ctx, userId, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CheckoutRequest) model.CheckoutResponse); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Get(0).(model.CheckoutResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.CheckoutRequest) error); ok {
		r1 = rf(ctx, userId, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductBasket provides a mock function with given fields: ctx, userId, productId
func (_m *TransactionService) DeleteProductBasket(ctx context.Context, userId string, productId string) error {
	ret := _m.Called(ctx, userId, productId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userId, productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProductBasket provides a mock function with given fields: ctx, userId
func (_m *TransactionService) GetAllProductBasket(ctx context.Context, userId string) ([]model.BasketResponse, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProductBasket")
	}

	var r0 []model.BasketResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.BasketResponse, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.BasketResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BasketResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierInfo provides a mock function with given fields: ctx
func (_m *TransactionService) GetCourierInfo(ctx context.Context) ([]model.CourierInfoResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCourierInfo")
	}

	var r0 []model.CourierInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.CourierInfoResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.CourierInfoResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CourierInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailTransaction provides a mock function with given fields: ctx, transactionId
func (_m *TransactionService) GetDetailTransaction(ctx context.Context, transactionId string) (model.DetailTransactionResponse, error) {
	ret := _m.Called(ctx, transactionId)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailTransaction")
	}

	var r0 model.DetailTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.DetailTransactionResponse, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.DetailTransactionResponse); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Get(0).(model.DetailTransactionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryTransactio provides a mock function with given fields: ctx, userId, params
func (_m *TransactionService) GetHistoryTransactio(ctx context.Context, userId string, params paginate.Pagination) ([]model.HistoryTransactionResponse, int64, error) {
	ret := _m.Called(ctx, userId, params)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryTransactio")
	}

	var r0 []model.HistoryTransactionResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) ([]model.HistoryTransactionResponse, int64, error)); ok {
		return rf(ctx, userId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) []model.HistoryTransactionResponse); ok {
		r0 = rf(ctx, userId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HistoryTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, params)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
