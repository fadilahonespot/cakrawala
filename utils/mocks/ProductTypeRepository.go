// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadilahonespot/cakrawala/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// ProductTypeRepository is an autogenerated mock type for the ProductTypeRepository type
type ProductTypeRepository struct {
	mock.Mock
}

// CreateProductType provides a mock function with given fields: ctx, productType
func (_m *ProductTypeRepository) CreateProductType(ctx context.Context, productType *entity.ProductType) error {
	ret := _m.Called(ctx, productType)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProductType) error); ok {
		r0 = rf(ctx, productType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductType provides a mock function with given fields: ctx, id
func (_m *ProductTypeRepository) DeleteProductType(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProductTypes provides a mock function with given fields: ctx
func (_m *ProductTypeRepository) GetAllProductTypes(ctx context.Context) ([]entity.ProductType, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProductTypes")
	}

	var r0 []entity.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.ProductType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.ProductType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductType provides a mock function with given fields: ctx, id
func (_m *ProductTypeRepository) GetProductType(ctx context.Context, id string) (*entity.ProductType, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductType")
	}

	var r0 *entity.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ProductType, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ProductType); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductType provides a mock function with given fields: ctx, productType
func (_m *ProductTypeRepository) UpdateProductType(ctx context.Context, productType *entity.ProductType) error {
	ret := _m.Called(ctx, productType)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProductType) error); ok {
		r0 = rf(ctx, productType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductTypeRepository creates a new instance of ProductTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductTypeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductTypeRepository {
	mock := &ProductTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
