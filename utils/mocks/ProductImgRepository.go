// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadilahonespot/cakrawala/domain/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// ProductImgRepository is an autogenerated mock type for the ProductImgRepository type
type ProductImgRepository struct {
	mock.Mock
}

// DeleteProductImg provides a mock function with given fields: ctx, tx, id
func (_m *ProductImgRepository) DeleteProductImg(ctx context.Context, tx *gorm.DB, id string) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductImg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductImgByProductId provides a mock function with given fields: ctx, tx, id
func (_m *ProductImgRepository) DeleteProductImgByProductId(ctx context.Context, tx *gorm.DB, id string) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductImgByProductId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductImgByProductId provides a mock function with given fields: ctx, id
func (_m *ProductImgRepository) GetProductImgByProductId(ctx context.Context, id string) ([]entity.ProductImg, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductImgByProductId")
	}

	var r0 []entity.ProductImg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.ProductImg, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.ProductImg); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ProductImg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductImg provides a mock function with given fields: ctx, tx, req
func (_m *ProductImgRepository) UpdateProductImg(ctx context.Context, tx *gorm.DB, req *entity.ProductImg) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductImg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.ProductImg) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductImgRepository creates a new instance of ProductImgRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductImgRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductImgRepository {
	mock := &ProductImgRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
