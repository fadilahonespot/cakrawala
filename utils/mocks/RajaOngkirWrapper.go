// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	rajaongkir "github.com/fadilahonespot/cakrawala/infrastructure/http/rajaongkir"
	mock "github.com/stretchr/testify/mock"
)

// RajaOngkirWrapper is an autogenerated mock type for the RajaOngkirWrapper type
type RajaOngkirWrapper struct {
	mock.Mock
}

// CheckCost provides a mock function with given fields: ctx, req
func (_m *RajaOngkirWrapper) CheckCost(ctx context.Context, req rajaongkir.CheckCostRequest) (rajaongkir.CheckCostResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckCost")
	}

	var r0 rajaongkir.CheckCostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, rajaongkir.CheckCostRequest) (rajaongkir.CheckCostResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, rajaongkir.CheckCostRequest) rajaongkir.CheckCostResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(rajaongkir.CheckCostResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, rajaongkir.CheckCostRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCity provides a mock function with given fields: ctx, provinceId
func (_m *RajaOngkirWrapper) GetCity(ctx context.Context, provinceId string) (rajaongkir.GetCityResponse, error) {
	ret := _m.Called(ctx, provinceId)

	if len(ret) == 0 {
		panic("no return value specified for GetCity")
	}

	var r0 rajaongkir.GetCityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (rajaongkir.GetCityResponse, error)); ok {
		return rf(ctx, provinceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) rajaongkir.GetCityResponse); ok {
		r0 = rf(ctx, provinceId)
	} else {
		r0 = ret.Get(0).(rajaongkir.GetCityResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, provinceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCityAndProvince provides a mock function with given fields: ctx, provinceId, cityId
func (_m *RajaOngkirWrapper) GetCityAndProvince(ctx context.Context, provinceId string, cityId string) (rajaongkir.GetCityProvinceResponse, error) {
	ret := _m.Called(ctx, provinceId, cityId)

	if len(ret) == 0 {
		panic("no return value specified for GetCityAndProvince")
	}

	var r0 rajaongkir.GetCityProvinceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (rajaongkir.GetCityProvinceResponse, error)); ok {
		return rf(ctx, provinceId, cityId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) rajaongkir.GetCityProvinceResponse); ok {
		r0 = rf(ctx, provinceId, cityId)
	} else {
		r0 = ret.Get(0).(rajaongkir.GetCityProvinceResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, provinceId, cityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvince provides a mock function with given fields: ctx
func (_m *RajaOngkirWrapper) GetProvince(ctx context.Context) (rajaongkir.GetProvinceResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProvince")
	}

	var r0 rajaongkir.GetProvinceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (rajaongkir.GetProvinceResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) rajaongkir.GetProvinceResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(rajaongkir.GetProvinceResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRajaOngkirWrapper creates a new instance of RajaOngkirWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRajaOngkirWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *RajaOngkirWrapper {
	mock := &RajaOngkirWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
