// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadilahonespot/cakrawala/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// CourierInfoRepository is an autogenerated mock type for the CourierInfoRepository type
type CourierInfoRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *CourierInfoRepository) FindAll(ctx context.Context) ([]entity.CourierInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.CourierInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.CourierInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.CourierInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CourierInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCode provides a mock function with given fields: ctx, code
func (_m *CourierInfoRepository) FindByCode(ctx context.Context, code string) (*entity.CourierInfo, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for FindByCode")
	}

	var r0 *entity.CourierInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.CourierInfo, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.CourierInfo); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CourierInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCourierInfoRepository creates a new instance of CourierInfoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourierInfoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourierInfoRepository {
	mock := &CourierInfoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
