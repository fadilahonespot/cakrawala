// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadilahonespot/cakrawala/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// AddressRepository is an autogenerated mock type for the AddressRepository type
type AddressRepository struct {
	mock.Mock
}

// GetCity provides a mock function with given fields: ctx, id
func (_m *AddressRepository) GetCity(ctx context.Context, id string) (*entity.City, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCity")
	}

	var r0 *entity.City
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.City, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.City); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.City)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvince provides a mock function with given fields: ctx, id
func (_m *AddressRepository) GetProvince(ctx context.Context, id string) (*entity.Province, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProvince")
	}

	var r0 *entity.Province
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Province, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Province); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Province)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCity provides a mock function with given fields: ctx, req
func (_m *AddressRepository) UpdateCity(ctx context.Context, req *entity.City) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.City) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProvince provides a mock function with given fields: ctx, req
func (_m *AddressRepository) UpdateProvince(ctx context.Context, req *entity.Province) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvince")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Province) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAddressRepository creates a new instance of AddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressRepository {
	mock := &AddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
