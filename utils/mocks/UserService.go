// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/fadilahonespot/cakrawala/usecase/user/model"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetCity provides a mock function with given fields: ctx, provinceId
func (_m *UserService) GetCity(ctx context.Context, provinceId string) ([]model.CityResponse, error) {
	ret := _m.Called(ctx, provinceId)

	if len(ret) == 0 {
		panic("no return value specified for GetCity")
	}

	var r0 []model.CityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.CityResponse, error)); ok {
		return rf(ctx, provinceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CityResponse); ok {
		r0 = rf(ctx, provinceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, provinceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, req
func (_m *UserService) GetProfile(ctx context.Context, req model.GetProfileRequest) (model.GetProfileResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 model.GetProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetProfileRequest) (model.GetProfileResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetProfileRequest) model.GetProfileResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.GetProfileResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetProfileRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvince provides a mock function with given fields: ctx
func (_m *UserService) GetProvince(ctx context.Context) ([]model.ProvinceResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProvince")
	}

	var r0 []model.ProvinceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.ProvinceResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.ProvinceResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProvinceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *UserService) Login(ctx context.Context, req model.LoginRequest) (model.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest) (model.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest) model.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *UserService) Register(ctx context.Context, req model.RegisterRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResendEmail provides a mock function with given fields: ctx, userId
func (_m *UserService) ResendEmail(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for ResendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: ctx, userId, req
func (_m *UserService) UpdateProfile(ctx context.Context, userId int, req model.UpdateProfileRequest) error {
	ret := _m.Called(ctx, userId, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.UpdateProfileRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationEmail provides a mock function with given fields: ctx, req
func (_m *UserService) VerificationEmail(ctx context.Context, req model.VerificationRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerificationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
